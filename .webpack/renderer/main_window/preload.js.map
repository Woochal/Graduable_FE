{"version":3,"file":"main_window/preload.js","mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,W,GCCrBC,EAA2B,CAAC,ECAhC,MAAM,cAAEC,EAAa,YAAEC,GDGvB,SAASC,EAAoBC,GAE5B,IAAIC,EAAeL,EAAyBI,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaP,QAGrB,IAAID,EAASG,EAAyBI,GAAY,CAGjDN,QAAS,CAAC,GAOX,OAHAS,EAAoBH,GAAUP,EAAQA,EAAOC,QAASK,GAG/CN,EAAOC,OACf,CCrBuC,CAAQ,KA2B/CG,EAAcO,kBAAkB,WAAY,CAExCC,cAAgBC,GAAgBR,EAAYS,OAAO,kBAAmBD,GACtEE,cAAe,CAACF,EAAaG,IAAmBX,EAAYS,OAAO,kBAAmBD,EAAKG,GAC3FC,iBAAmBJ,GAAgBR,EAAYS,OAAO,qBAAsBD,GAE5EK,eAAgB,IAAMb,EAAYS,OAAO,oBACzCK,OAAQ,IAAMd,EAAYS,OAAO,UACjCM,eAAiBC,IACbhB,EAAYiB,GAAG,iBAAiB,CAACC,EAAYC,IAAwBH,EAASG,IAAM,EAExFC,aAAeJ,IACXhB,EAAYiB,GAAG,eAAe,CAACC,EAAYG,IAAkBL,EAASK,IAAO,EAGjFC,SAAU,CACNC,KAAM,IAAMC,QAAQF,SAASC,KAC7BE,OAAQ,IAAMD,QAAQF,SAASG,OAC/BC,SAAU,IAAMF,QAAQF,SAASI,W","sources":["webpack://swproject/external commonjs2 \"electron\"","webpack://swproject/webpack/bootstrap","webpack://swproject/./electron/preload.ts"],"sourcesContent":["module.exports = require(\"electron\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// electron/preload.ts\nconst { contextBridge, ipcRenderer } = require('electron');\n\ninterface OAuthUserData {\n    googleId: string;\n    email: string;\n    name: string;\n}\n\ninterface ElectronAPI {\n    // Store 관련\n    getStoreValue: (key: string) => Promise<unknown>;\n    setStoreValue: (key: string, value: unknown) => Promise<void>;\n    removeStoreValue: (key: string) => Promise<void>;\n    // Auth 관련\n    openGoogleAuth: () => Promise<string>;\n    logout: () => Promise<void>;\n    onOAuthSuccess: (callback: (data: OAuthUserData) => void) => void;\n    onOAuthError: (callback: (error: string) => void) => void;\n    // 시스템 정보\n    versions: {\n        node: () => string;\n        chrome: () => string;\n        electron: () => string;\n    };\n}\n\n// 렌더러에서 사용할 Electron API 노출\ncontextBridge.exposeInMainWorld('electron', {\n    // Store 관련\n    getStoreValue: (key: string) => ipcRenderer.invoke('get-store-value', key),\n    setStoreValue: (key: string, value: unknown) => ipcRenderer.invoke('set-store-value', key, value),\n    removeStoreValue: (key: string) => ipcRenderer.invoke('remove-store-value', key),\n    // Auth 관련\n    openGoogleAuth: () => ipcRenderer.invoke('open-google-auth'),\n    logout: () => ipcRenderer.invoke('logout'),\n    onOAuthSuccess: (callback: (data: OAuthUserData) => void) => {\n        ipcRenderer.on('oauth-success', (_: unknown, data: OAuthUserData) => callback(data));\n    },\n    onOAuthError: (callback: (error: string) => void) => {\n        ipcRenderer.on('oauth-error', (_: unknown, error: string) => callback(error));\n    },\n    // 시스템 정보\n    versions: {\n        node: () => process.versions.node,\n        chrome: () => process.versions.chrome,\n        electron: () => process.versions.electron,\n    },\n});\n\nexport {};\n\n// TypeScript 타입 선언\ndeclare global {\n    interface Window {\n        electron: ElectronAPI;\n    }\n}\n"],"names":["module","exports","require","__webpack_module_cache__","contextBridge","ipcRenderer","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","exposeInMainWorld","getStoreValue","key","invoke","setStoreValue","value","removeStoreValue","openGoogleAuth","logout","onOAuthSuccess","callback","on","_","data","onOAuthError","error","versions","node","process","chrome","electron"],"sourceRoot":""}